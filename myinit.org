#+STARTUP: overview

* Theme
  #+BEGIN_SRC emacs-lisp
    (use-package zenburn-theme
      :ensure t
      )
    (use-package solarized-theme
      :ensure t
      )
    (use-package dracula-theme
      :ensure t
      )

    (load-theme 'dracula t)
  #+END_SRC

* Font
  #+BEGIN_SRC emacs-lisp
    (set-face-attribute 'default nil
			:family "Ubuntu Mono"
			:height 160
			:weight 'normal
			:width 'normal)
  #+END_SRC
* Interface Tweaks
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (fset 'yes-or-no-p 'y-or-n-p)
    (setq make-backup-files nil)
    (setq auto-save-default nil)
    (setq column-number-mode t)
    (show-paren-mode 1)
    (global-auto-revert-mode t)
  #+END_SRC

* MacOS
  #+BEGIN_SRC emacs-lisp
    (when (eq system-type 'darwin)
      ;; meta
      (setq mac-option-modifier 'super)
      (setq mac-command-modifier 'meta)
      ;; go
      (setq exec-path (append '("/usr/local/go/bin")
			      exec-path))
      (setq exec-path (append '("/usr/local/bin")
			      exec-path)))

  #+END_SRC

* Hangul
  #+BEGIN_SRC emacs-lisp
    (set-language-environment "Korean")
    (prefer-coding-system 'utf-8)
    (when window-system
      (set-fontset-font "fontset-default" '(#x1100 . #xffdc)  '("NanumGothicCoding" . "unicode-bmp"))
      (set-fontset-font "fontset-default" '(#xe0bc . #xf66e) '("NanumGothicCoding" . "unicode-bmp"))
      )

  #+END_SRC
* Try
  #+BEGIN_SRC emacs-lisp
    (use-package try
      :ensure t)
  #+END_SRC

* Which key
  #+BEGIN_SRC emacs-lisp 
    (use-package which-key
      :ensure t
      :config (which-key-mode))
  #+END_SRC

* Org bullets
  #+BEGIN_SRC emacs-lisp 
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  #+END_SRC

* Buffer
  #+BEGIN_SRC emacs-lisp 
    (setq indo-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)
    (defalias 'list-buffers 'ibuffer)
    ;; (defalias 'list-buffers 'ibuffer-other-window)
  #+END_SRC

* Tabbar
  #+BEGIN_SRC emacs-lisp 
    ;; (use-package tabbar
    ;;   :ensure t
    ;;   :config
    ;;   (tabbar-mode 1))
  #+END_SRC

* Ace Window
  #+BEGIN_SRC emacs-lisp 
    (use-package ace-window 
      :ensure t
      :init
      (progn
	(global-set-key [remap other-window] 'ace-window)
	(custom-set-faces
	 '(aw-leading-char-face
	   ((t (:inherit ace-jump-face-foreground :height 3.0)))))
	))
  #+END_SRC

* Ivy, Counsel, Swiper
  #+BEGIN_SRC emacs-lisp 
    (use-package counsel
      :ensure t
      )

    (use-package ivy
      :ensure t
      :diminish (ivy-mode)
      :bind (("C-x b" . ivy-switch-buffer))
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy))

    (use-package swiper
      :ensure t
      :bind (("C-s" . swiper)
	     ("C-r" . swiper)
	     ("C-c C-r" . ivy-resume)
	     ("M-x" . counsel-M-x)
	     ("C-x C-f" . counsel-find-file))
      :config
      (progn
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(setq ivy-display-style 'fancy)
	(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	))
  #+END_SRC

* Avy
  #+BEGIN_SRC emacs-lisp 
    (use-package avy
      :ensure t
      :bind (("M-s" . avy-goto-char)))
  #+END_SRC

* Auto complete
  #+BEGIN_SRC emacs-lisp 
    (use-package auto-complete
      :ensure t
      :init
      (progn
	(ac-config-default)
	(global-auto-complete-mode t)
	))
  #+END_SRC
* Reveal.js
  #+BEGIN_SRC emacs-lisp
    (use-package ox-reveal
    :ensure ox-reveal)

    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
    (setq org-reveal-mathjax t)

    (use-package htmlize
    :ensure t)
  #+END_SRC
* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))

  #+END_SRC
* Exec path from shell
  #+BEGIN_SRC emacs-lisp
    (use-package exec-path-from-shell
      :ensure t
      :config
      (exec-path-from-shell-initialize))

  #+END_SRC
* Python
  #+BEGIN_SRC emacs-lisp
    (setq py-python-command "python3")
    (use-package jedi
      :ensure t
      :init
      (add-hook 'python-mode-hook 'jedi:setup)
      (add-hook 'python-mode-hook 'jedi:ac-setup))

    (use-package elpy
      :ensure t
      :config
      (elpy-enable))

  #+END_SRC
* Yasnippet
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :init
      (yas-global-mode 1))

    (use-package yasnippet-snippets
      :ensure t)
  #+END_SRC
* C/C++
** clang-format
   #+BEGIN_SRC emacs-lisp
     (use-package clang-format
       :ensure t
       :bind (("C-c f r" . clang-format-region)
	      ("C-c f b" . clang-format-buffer))
       :config
       (defun my-clang-format-before-save ()
	 "Usage: (add-hook 'before-save-hook 'my-clang-format-before-save)."
	 (when (or (eq major-mode 'c-mode) (eq major-mode 'c++-mode))
	   (clang-format-buffer)))
       (add-hook 'before-save-hook 'my-clang-format-before-save)
       )
   #+END_SRC
** ggtags
   #+BEGIN_SRC emacs-lisp
     (use-package ggtags
       :ensure t
       :config 
       (add-hook 'c-mode-common-hook
		 (lambda ()
		   (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
		     (ggtags-mode 1))))
     )

   #+END_SRC
** style
   #+BEGIN_SRC emacs-lisp
     (defun my-prog-mode-hook ()
       (c-set-style "bsd")
       (setq-default tab-width 4)
       (setq c-basic-offset 4)
       (setq indent-tabs-mode nil)
       )

     (add-hook 'c-mode-hook 'my-prog-mode-hook)
     (add-hook 'c++-mode-hook 'my-prog-mode-hook)

   #+END_SRC

* Projectile
  #+BEGIN_SRC emacs-lisp
	(use-package projectile
	  :ensure t
	  ;; :bind ("C-c p" . projectile-command-map)
	  :config
	  (projectile-global-mode)
	  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
	  (setq projectile-completion-system 'ivy)
	  (setq projectile-indexing-method 'hybrid)
	  )
  #+END_SRC
* Git
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
    )

  #+END_SRC
* CMake
  #+BEGIN_SRC emacs-lisp
    (use-package cmake-ide
      :ensure t
      :bind (("C-c c c" . cmake-ide-compile)
	     ("C-c c r" . cmake-ide-run-cmake))
      :config
      (setq
       cmake-ide-build-dir "build"
       cmake-ide-cmake-args '("-DCMAKE_BUILD_TYPE=Debug")
       ))

  #+END_SRC

* Ag
  #+BEGIN_SRC emacs-lisp
	(use-package ag
	  :ensure t)

  #+END_SRC
