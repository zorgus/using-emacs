#+STARTUP: overview

* Package Init
** Repository
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)
#+END_SRC
** use-package
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

#+END_SRC


* Theme
  #+BEGIN_SRC emacs-lisp
    (use-package zenburn-theme
      :ensure t
      )
    (use-package solarized-theme
      :ensure t
      )
    (use-package dracula-theme
      :ensure t
      )
    (use-package darkburn-theme
      :ensure t
      )

    (when window-system
      (load-theme 'deeper-blue t)
      (set-face-attribute 'region nil :background "yellow")
      )

  #+END_SRC


* Font
  #+BEGIN_SRC emacs-lisp
    (set-face-attribute 'default nil
			:family "D2Coding"
			:height 160
			:weight 'normal
			:width 'normal)
  #+END_SRC


* Interface Tweaks
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (fset 'yes-or-no-p 'y-or-n-p)
    (setq make-backup-files nil)
    (setq auto-save-default nil)
    (setq column-number-mode t)
    (show-paren-mode 1)
    (global-auto-revert-mode t)
    (when window-system
    (setq-default display-line-numbers 'visual
              display-line-numbers-current-absolute t
              display-line-numbers-width 4 
              display-line-numbers-widen t)
	      (global-display-line-numbers-mode))
    (unless window-system
      (menu-bar-mode -1))
    ;; (set-cursor-color "YellowGreen")

  #+END_SRC


* My functions
** kill other buffers
   #+BEGIN_SRC emacs-lisp
     (defun kill-other-buffers ()
       "Kill all other buffers."
       (interactive)
       (mapc 'kill-buffer 
	     (delq (current-buffer) 
		   (remove-if-not 'buffer-file-name (buffer-list)))))
     (global-set-key (kbd "C-x C-o") 'kill-other-buffers)
   #+END_SRC


* MacOS
  #+BEGIN_SRC emacs-lisp
    (when (eq system-type 'darwin)
      ;; meta
      (setq mac-option-modifier 'super)
      (setq mac-command-modifier 'meta)
      ;; go
      (setq exec-path (append '("/usr/local/go/bin")
			      exec-path))
      (setq exec-path (append '("/usr/local/bin")
			      exec-path))
      )

  #+END_SRC

  
* Hangul
  #+BEGIN_SRC emacs-lisp
    (set-language-environment "Korean")
    (prefer-coding-system 'utf-8)
    (when window-system
      (set-fontset-font "fontset-default" '(#x1100 . #xffdc)  '("NanumGothicCoding" . "unicode-bmp"))
      (set-fontset-font "fontset-default" '(#xe0bc . #xf66e) '("NanumGothicCoding" . "unicode-bmp"))
      )

  #+END_SRC


* Try
  #+BEGIN_SRC emacs-lisp
    (use-package try
      :ensure t)
  #+END_SRC


* Which key
  #+BEGIN_SRC emacs-lisp 
    (use-package which-key
      :ensure t
      :config (which-key-mode))
  #+END_SRC


* Org bullets
  #+BEGIN_SRC emacs-lisp 
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  #+END_SRC


* Org
#+BEGIN_SRC emacs-lisp
(use-package org
:ensure t
:config
  (setq
   ;; org-bullets-bullet-list '("∴" "☰" "◯" "○" "◦")
   ;; org-bullets-bullet-list '("☰" "☱" "☲" "☳" "☴" "☵" "☶" "☷")
   org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELED(c)"))
   ;; org-todo-keyword-faces
   ;; '(("TODO" :foreground "green" :underline t)
   ;;   ("INPROGRESS" :foreground "yellow" :underline t)
   ;;   ("DONE" :foreground "grey" :underline t))
   ;; org-agenda-files '("~/gdrive/DataSync/Dropbox/Org/")
   org-agenda-files '("~/gtd/inbox.org"
		      "~/gtd/gtd.org"
		      "~/gtd/tickler.org")
   org-tags-column -80
   org-log-done 'time
   ;; org-ellipsis " ▾ "
   ;; org-ellipsis " ⬎ "
   ;; org-ellipsis " [...] "
   org-capture-templates '(("t" "Todo [inbox]" entry
			    (file+headline "~/gtd/inbox.org" "Tasks")
			    "* TODO %i%?")
			   ("T" "Tickler" entry
			    (file+headline "~/gtd/tickler.org" "Tickler")
			    "* %i%? \n %U"))
   ;; org-priority-faces '((254 . (:foreground "red" :weight 'bold))
   ;;                      (254 . (:foreground "yellow"))
   ;;                      (254 . (:foreground "green")))
   org-agenda-prefix-format '((agenda . " %i %-12:c%?-12t% s")
			      (timeline . "  % s")
			      (todo .
				    " %i %-12:c %(concat \"[ \"(org-format-outline-path (last (org-get-outline-path))) \" ] ➤ \") ")
			      (tags .
				    " %i %-12:c %(concat \"[ \"(org-format-outline-path (last (org-get-outline-path))) \" ] ➤ \") ")
			      ;; (todo . " %b")
			      ;; (tags . " %b")
			      (search . " %i %-12:c"))
   org-agenda-breadcrumbs-separator "  ➤  "
   ;; org-agenda-breadcrumbs-separator "  /  "
   )
)
#+END_SRC


* Org custom command
** util functions
#+BEGIN_SRC elisp

(defun my-org-agenda-skip-all-siblings-but-first ()
  "Skip all but the first non-done entry."
  (let (should-skip-entry)
    (unless (org-current-is-todo)
      (setq should-skip-entry t))
    (save-excursion
      (while (and (not should-skip-entry) (org-goto-sibling t))
        (when (and (org-current-is-todo) (not (string= "inbox" (org-agenda-get-category))))
          (setq should-skip-entry t))))
    (when should-skip-entry
      (or (outline-next-heading)
          (goto-char (point-max))))))

(defun org-current-is-todo ()
  (or (string= "TODO" (org-get-todo-state))
      (string= "WAITING" (org-get-todo-state))))


#+END_SRC
** org-super-agenda
#+BEGIN_SRC elisp
  (defun my-super-agenda-setting ()
    (use-package org-super-agenda
      :ensure t
      :config
      (setq
       org-agenda-custom-commands
       '(("w" tags-todo "WORK" nil)
	 ("h" tags-todo "HOME" nil)
	 ("s" tags-todo "STUDY" nil)
	 ("r" tags-todo "READING" nil)
	 ("a" "My Agenda"
	  ((agenda "" ((org-agenda-span 2)
		       (org-agenda-start-day "-1d")
		       (org-super-agenda-groups
			'((:name "Today List"
				 :time-grid t
				 :date today
				 :todo ("TODO" "NEXT")
				 :scheduled today
				 :order 1)))))
	   (alltodo "" ((org-agenda-overriding-header "")
			(org-super-agenda-groups
			 '((:name "Next to do"
				  :priority>= "B"
				  :todo "NEXT"
				  :order 2)
			   (:name "Due Today"
				  :deadline today
				  :order 3)
			   (:name "Due Soon"
				  :deadline future
				  :order 8)
			   (:name "Overdue"
				  :deadline past
				  :order 20)
			   (:name "Work"
				  :tag "WORK"
				  :order 14)
			   (:name "Study"
				  :tag "STUDY"
				  :order 13)
			   (:name "Personal"
				  :tag "HOME"
				  :order 15)
			   (:name "To read"
				  :tag ("BOOK" "READING")
				  :order 30)
			   (:name "Waiting"
				  :todo "⚑ WAITING"
				  :order 18)
			   (:name "trivial"
				  :priority<= "C"
				  :todo ("SOMEDAY")
				  :order 90)
			   (:discard (:tag ("Chore" "Routine" "Daily")))
			   )))))))

       )
      )
    )
  ;; (my-super-agenda-setting)
#+END_SRC
** gtd1
#+BEGIN_SRC elisp

(defun my-gtd-agenda-setting-old ()
  (setq org-agenda-custom-commands
        '(
          ("n" "Agenda and all TODOs"
           ((agenda "")
            (alltodo "")))
          ("o" "At the office" tags-todo "@office"
           ((org-agenda-overriding-header "Office")
            (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))
          ("h" "At the home" tags-todo "@home"
           ((org-agenda-overriding-header "Home")
            (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))
          ))

  )


;; (my-gtd-agenda-setting-old)

#+END_SRC
** gtd2
#+BEGIN_SRC elisp
(defun my-gtd-agenda-setting ()
  (setq org-agenda-custom-commands
        '(
          ("n" "Agenda and all TODOs"
           ((agenda "")
            (alltodo ""))
           ((org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))
          ("g" . "GTD contexts")
          ("go" "Office" tags-todo "@office"
           ((org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))
          ("gh" "Home" tags-todo "@home"
           ((org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))
          ("gc" "Email" tags-todo "@email"
           ((org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))
          ("gp" "Phone" tags-todo "@phone"
           ((org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))
          ("ge" "Errands" tags-todo "@errands"
           ((org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))
          ("gr" "Reading" tags-todo "reading"
           ((org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))
          ("G" "GTD Block Agenda"
           ((tags-todo "@office")
            (tags-todo "@home")
            (tags-todo "@email")
            (tags-todo "@phone"))
           ((org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first))
           ("~/next-actions.html")) ;; exports block to this file with C-c a e
          ("I" "Inbox" alltodo ""
           ((org-agenda-files '("~/gtd/inbox.org")))
           )
          ))
  )
(my-gtd-agenda-setting)

#+END_SRC


* Buffer
  #+BEGIN_SRC emacs-lisp 
    (setq indo-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)
    (defalias 'list-buffers 'ibuffer)
    ;; (defalias 'list-buffers 'ibuffer-other-window)
  #+END_SRC


* Tabbar
  #+BEGIN_SRC emacs-lisp 
    ;; (use-package tabbar
    ;;   :ensure t
    ;;   :config
    ;;   (tabbar-mode 1))
  #+END_SRC


* Ace Window
  #+BEGIN_SRC emacs-lisp 
    (use-package ace-window 
      :ensure t
      :init
      (progn
	(global-set-key [remap other-window] 'ace-window)
	(custom-set-faces
	 '(aw-leading-char-face
	   ((t (:inherit ace-jump-face-foreground :height 3.0)))))
	))
  #+END_SRC


* Ivy, Counsel, Swiper
  #+BEGIN_SRC emacs-lisp 
    (use-package counsel
      :ensure t
      )

    (use-package ivy
      :ensure t
      :diminish (ivy-mode)
      :bind (("C-x b" . ivy-switch-buffer))
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy))

    (use-package swiper
      :ensure t
      :bind (("C-S-s" . swiper)
	     ("C-c C-r" . ivy-resume)
	     ("M-x" . counsel-M-x)
	     ("C-x C-f" . counsel-find-file))
      :config
      (progn
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(setq ivy-display-style 'fancy)
	(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	))
  #+END_SRC


* Avy
  #+BEGIN_SRC emacs-lisp 
    (use-package avy
      :ensure t
      :bind (("M-s" . avy-goto-char)))
  #+END_SRC


* Auto complete
  #+BEGIN_SRC emacs-lisp 
    (use-package auto-complete
      :ensure t
      :init
      (progn
	(ac-config-default)
	(global-auto-complete-mode t)
	))
  #+END_SRC


* Reveal.js
  #+BEGIN_SRC emacs-lisp
    (use-package ox-reveal
    :ensure ox-reveal)

    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
    (setq org-reveal-mathjax t)

    (use-package htmlize
    :ensure t)
  #+END_SRC


* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))

  #+END_SRC


* Exec path from shell
  #+BEGIN_SRC emacs-lisp
    (use-package exec-path-from-shell
      :ensure t
      :config
      (exec-path-from-shell-initialize))

  #+END_SRC


* Python
** jedi
  #+BEGIN_SRC emacs-lisp
    (setq py-python-command "python3")
    (use-package jedi
      :ensure t
      :init
      (add-hook 'python-mode-hook 'jedi:setup)
      (add-hook 'python-mode-hook 'jedi:ac-setup)
      (setq jedi:complete-on-dot t)
      )

  #+END_SRC
** elpy
  #+BEGIN_SRC emacs-lisp
    (use-package elpy
      :ensure t
      :config
      (elpy-enable))

  #+END_SRC
** ein
  #+BEGIN_SRC emacs-lisp
    (use-package ein
      :ensure t
      :init
      (add-hook 'ein:notebooklist-first-open-hook
		(lambda () (add-hook 'ein:notebook-mode-hook 'jedi:setup)))
      (setq
       ein:completion-backend 'ein:use-ac-backend
       ein:use-auto-complete t
       ein:complete-on-dot t
       )
      :config
      )

  #+END_SRC


* Yasnippet
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :init
      (yas-global-mode 1))

    (use-package yasnippet-snippets
      :ensure t)
  #+END_SRC


* C/C++
** clang-format
   #+BEGIN_SRC emacs-lisp
     (use-package clang-format
       :ensure t
       :bind (("C-c f r" . clang-format-region)
	      ("C-c f b" . clang-format-buffer))
       :init
       (defun my-clang-format-before-save ()
	 "Usage: (add-hook 'before-save-hook 'my-clang-format-before-save)."
	 (when (or (eq major-mode 'c-mode) (eq major-mode 'c++-mode))
	   (clang-format-buffer)))
       (add-hook 'before-save-hook 'my-clang-format-before-save)
       )
   #+END_SRC
** counsel-gtags
#+BEGIN_SRC emacs-lisp
  (use-package counsel-gtags
    :ensure t
    :bind (("M-." . counsel-gtags-dwim)
	   ("M-]" . counsel-gtags-find-reference)
	   ("M-s" . counsel-gtags-find-symbol)
	   ("M-*" . counsel-gtags-go-backward))
    :config
    (add-hook 'c-mode-common-hook
	      (lambda ()
		(when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
		  (counsel-gtags-mode)
		  )))
    (setq counsel-gtags-auto-update t)
    )

#+END_SRC
** ggtags
   #+BEGIN_SRC emacs-lisp
     ;; (use-package ggtags
     ;;   :ensure t
     ;;   :config 
     ;;   (add-hook 'c-mode-common-hook
     ;; 	    (lambda ()
     ;; 	      (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
     ;; 		(ggtags-mode 1)
     ;; 		(setq ggtags-auto-jump-to-match nil)
     ;; 		(setq ggtags-global-abbreviate-filename nil)
     ;; 		(setq ggtags-global-window-height 10)
     ;; 		)))
     ;;   )
   #+END_SRC
** style
   #+BEGIN_SRC emacs-lisp
     (defun my-prog-mode-hook ()
       (c-set-style "bsd")
       (setq-default tab-width 8)
       (setq c-basic-offset 4)
       (setq indent-tabs-mode nil)
       )

     (add-hook 'c-mode-hook 'my-prog-mode-hook)
     (add-hook 'c++-mode-hook 'my-prog-mode-hook)

   #+END_SRC


* Project
** projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :config
      (projectile-global-mode)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
      (setq projectile-completion-system 'ivy)
      (setq projectile-indexing-method 'hybrid)
      :init
      (global-set-key (kbd "C-c p s s") 'counsel-ag)
      )
  #+END_SRC
** counsel-projectile
  #+BEGIN_SRC emacs-lisp
    (use-package counsel-projectile
      :ensure t
      :config
      (define-key projectile-mode-map [remap projectile-ag] #'counsel-projectile-ag)
      )
  #+END_SRC
** neotree
  #+BEGIN_SRC emacs-lisp
    (use-package neotree
      :ensure t
      :bind (("C-c n" . neotree-toggle))
      :config
      ;; (setq projectile-switch-project-action (lambda () (neotree-projectile-action) (projectile-find-file)))
      :init
      ;; (neotree-show)
      )
  #+END_SRC


* Golang
** Env
   #+BEGIN_SRC emacs-lisp
     (setenv "GOPATH" "/Users/user/project/go")

   #+END_SRC
** go-mode
   #+BEGIN_SRC emacs-lisp
     (use-package go-mode
       :ensure t
       :config
       (add-hook 'before-save-hook 'gofmt-before-save)
       (define-key go-mode-map (kbd "M-.") 'godef-jump)
       )

   #+END_SRC
** flycheck-gometalinter
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck-gometalinter
       :ensure t
       :config
       (progn
	 (flycheck-gometalinter-setup)
	 (setq flycheck-gometalinter-errors-only t)
	 (setq flycheck-gometalinter-fast t))
       )

   #+END_SRC


* Git
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :config
      (setq magit-completing-read-function 'ivy-completing-read)
      )

    (use-package git-gutter
      :ensure t
      :config
      (global-git-gutter-mode 1)
      (add-to-list 'git-gutter:update-commands 'other-window)
      (add-to-list 'git-gutter:update-commands 'ace-window)
      )
  #+END_SRC


* CMake
  #+BEGIN_SRC emacs-lisp
    (use-package cmake-ide
      :ensure t
      :bind (("C-c c c" . cmake-ide-compile)
	     ("C-c c r" . cmake-ide-run-cmake))
      :config
      (setq
       cmake-ide-build-dir "build"
       cmake-ide-cmake-args '("-DCMAKE_BUILD_TYPE=Debug")
       ))

    (use-package cmake-mode
      :ensure t
      :config
      (setq cmake-tab-width 4)
      )
  #+END_SRC


* Ag
  #+BEGIN_SRC emacs-lisp
    ;; (use-package ag
    ;;   :ensure t)

  #+END_SRC


* Popwin
  #+BEGIN_SRC emacs-lisp
    ;; (use-package popwin
    ;;   :ensure t
    ;;   :config
    ;;   (progn
    ;; 	(setq popwin:special-display-config nil)
    ;; 	(push '("*Backtrace*"
    ;; 			:dedicated t :position bottom :stick t :noselect nil :height 0.33)
    ;; 		  popwin:special-display-config)
    ;; 	(push '("*compilation*"
    ;; 			:dedicated t :position bottom :stick t :noselect t   :height 0.2)
    ;; 		  popwin:special-display-config)
    ;; 	(push '("*Compile-Log*"
    ;; 			:dedicated t :position bottom :stick t :noselect t   :height 0.33)
    ;; 		  popwin:special-display-config)
    ;; 	(push '("*Help*"
    ;; 			:dedicated t :position bottom :stick t :noselect nil :height 0.33)
    ;; 		  popwin:special-display-config)
    ;; 	(push '("*Shell Command Output*"
    ;; 			:dedicated t :position bottom :stick t :noselect nil :height 0.33)
    ;; 		  popwin:special-display-config)
    ;; 	(push '(" *undo-tree*"
    ;; 			:dedicated t :position bottom :stick t :noselect nil :height 0.33)
    ;; 		  popwin:special-display-config)
    ;; 	(push '("*Warnings*"
    ;; 			:dedicated t :position bottom :stick t :noselect nil :height 0.33)
    ;; 		  popwin:special-display-config)
    ;; 	(push '("^\\*Man .*\\*$"
    ;; 			:regexp t    :position bottom :stick t :noselect nil :height 0.33)
    ;; 			popwin:special-display-config)
    ;; 	(push '("*ggtags-global*"
    ;; 			:dedicated t :position bottom :stick t :noselect nil :height 0.33)
    ;; 		  popwin:special-display-config)
    ;; 	(popwin-mode 1)))

  #+END_SRC


* Evil mode
  #+BEGIN_SRC emacs-lisp
    ;; (use-package evil
    ;;   :ensure t
    ;;   :init
    ;;   (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    ;;   (setq evil-want-keybinding nil)
    ;;   :config
    ;;   (setq evil-symbol-word-search t)
    ;;   (evil-mode 1)
    ;;   )
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    ;; (use-package evil-collection
    ;;   :after evil
    ;;   :ensure t
    ;;   :config
    ;;   (evil-collection-init)
    ;;   )
    ;; ;; 
  #+END_SRC

  
* Misc
  #+BEGIN_SRC emacs-lisp
	(use-package beacon
	  :ensure t
	  :config
	  (when window-system
	    (beacon-mode 1))
	  )
  #+END_SRC


* Personal Keybinding
  #+BEGIN_SRC emacs-lisp

  #+END_SRC
