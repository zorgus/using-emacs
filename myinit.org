#+STARTUP: overview

* interface tweaks
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    (tool-bar-mode -1)
    (fset 'yes-or-no-p 'y-or-n-p)
  #+END_SRC

* try
  #+BEGIN_SRC emacs-lisp
    (use-package try
      :ensure t)
  #+END_SRC

* which key
  #+BEGIN_SRC emacs-lisp 
    (use-package which-key
      :ensure t
      :config (which-key-mode))
  #+END_SRC

* org bullets
  #+BEGIN_SRC emacs-lisp 
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  #+END_SRC

* buffer
  #+BEGIN_SRC emacs-lisp 
    (setq indo-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)
    (defalias 'list-buffers 'ibuffer)
    ;; (defalias 'list-buffers 'ibuffer-other-window)
  #+END_SRC

* tabbar
  #+BEGIN_SRC emacs-lisp 
    ;; (use-package tabbar
    ;;   :ensure t
    ;;   :config
    ;;   (tabbar-mode 1))
  #+END_SRC

* ace-window
  #+BEGIN_SRC emacs-lisp 
    (use-package ace-window 
      :ensure t
      :init
      (progn
	(global-set-key [remap other-window] 'ace-window)
	(custom-set-faces
	 '(aw-leading-char-face
	   ((t (:inherit ace-jump-face-foreground :height 3.0)))))
	))
  #+END_SRC

* ivy, counsel, swiper
  #+BEGIN_SRC emacs-lisp 
    (use-package counsel
      :ensure t
      )

    (use-package ivy
      :ensure t
      :diminish (ivy-mode)
      :bind (("C-x b" . ivy-switch-buffer))
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy))

    (use-package swiper
      :ensure t
      :bind (("C-s" . swiper)
	     ("C-r" . swiper)
	     ("C-c C-r" . ivy-resume)
	     ("M-x" . counsel-M-x)
	     ("C-x C-f" . counsel-find-file))
      :config
      (progn
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(setq ivy-display-style 'fancy)
	(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	))
  #+END_SRC

* avy
  #+BEGIN_SRC emacs-lisp 
    (use-package avy
      :ensure t
      :bind (("M-s" . avy-goto-char)))
  #+END_SRC

* Auto complete
  #+BEGIN_SRC emacs-lisp 
    (use-package auto-complete
      :ensure t
      :init
      (progn
	(ac-config-default)
	(global-auto-complete-mode t)
	))
  #+END_SRC

* Theme
  #+BEGIN_SRC emacs-lisp 
    (use-package zenburn-theme
      :ensure t
      :config (load-theme 'zenburn t))

    (load-theme 'leuven t)
  #+END_SRC
* Reveal.js
  #+BEGIN_SRC emacs-lisp
    (use-package ox-reveal
    :ensure ox-reveal)

    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
    (setq org-reveal-mathjax t)

    (use-package htmlize
    :ensure t)
  #+END_SRC
* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))

  #+END_SRC
* Python
  #+BEGIN_SRC emacs-lisp
    (setq py-python-command "python3")
    (use-package jedi
      :ensure t
      :init
      (add-hook 'python-mode-hook 'jedi:setup)
      (add-hook 'python-mode-hook 'jedi:ac-setup))

  #+END_SRC
